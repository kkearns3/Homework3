[
  {
    "objectID": "HW3.html",
    "href": "HW3.html",
    "title": "HW3",
    "section": "",
    "text": "Read in R objects file\n\nload(\"hw2_list.rda\")\n\n\n\n\nCreate status columns in the df’s within bp_list\n\n\nbp_list$treatment$status &lt;- character(dim(bp_list$treatment)[1])\nbp_list$placebo$status &lt;- character(dim(bp_list$placebo)[1])\n\n\nFor loop to populate values of status column of treatment data frame\n\n\nFor each iteration, will store the post_bp value in val\nIf the value is not numeric or is missing, the loop will stop\nOtherwise, status value will be assigned based on the specified range\n\n\nfor (i in 1:dim(bp_list$treatment)[1]) {\n  val &lt;- bp_list$treatment[i, \"post_bp\"]\n  bp_list$treatment[[\"status\"]][i] &lt;- \n      if (is.na(val) | !is.numeric(val)) {\n        break\n      } else if (val &lt;= 120) {\n        \"optimal\"\n      } else if (val &lt;= 130) {\n        \"borderline\"\n      } else {\n        \"high\" # all val &gt; 130\n      }\n}\n\n\nFor loop to populate values of status column of placebo data frame\n\n\nFollows the same logic as step 2, just for placebo instead of treatment df\n\n\nfor (i in 1:dim(bp_list$placebo)[1]) {\n  val &lt;- bp_list$placebo[i, \"post_bp\"]\n  bp_list$placebo[[\"status\"]][i] &lt;- \n      if (is.na(val) | !is.numeric(val)) {\n        break\n      } else if (val &lt;= 120) {\n        \"optimal\"\n      } else if (val &lt;= 130) {\n        \"borderline\"\n      } else {\n        \"high\" # all val &gt; 130\n      }\n}\n\nPrinting results\n\nbp_list\n\n$treatment\n              patient pre_bp post_bp diff_bp normal     status\nSubject_1   Subject_1    120     127      -7  FALSE borderline\nSubject_2   Subject_2    151     145       6  FALSE       high\nSubject_3   Subject_3    125     135     -10  FALSE       high\nSubject_4   Subject_4    126     122       4  FALSE borderline\nSubject_5   Subject_5    115     115       0   TRUE    optimal\nSubject_6   Subject_6    132     122      10  FALSE borderline\nSubject_7   Subject_7    132     123       9  FALSE borderline\nSubject_8   Subject_8    129     126       3  FALSE borderline\nSubject_9   Subject_9    134     126       8  FALSE borderline\nSubject_10 Subject_10    139     129      10  FALSE borderline\nSubject_11 Subject_11    127     132      -5  FALSE       high\nSubject_12 Subject_12    122     146     -24  FALSE       high\nSubject_13 Subject_13    127     120       7  FALSE    optimal\nSubject_14 Subject_14    135     114      21   TRUE    optimal\nSubject_15 Subject_15    133     121      12  FALSE borderline\nSubject_16 Subject_16    128     120       8  FALSE    optimal\nSubject_17 Subject_17    147     128      19  FALSE borderline\nSubject_18 Subject_18    138     120      18  FALSE    optimal\nSubject_19 Subject_19    140     133       7  FALSE       high\nSubject_20 Subject_20    132     115      17   TRUE    optimal\n\n$placebo\n      patient pre_bp post_bp diff_bp normal     status\n1   Subject_1    138     105      33   TRUE    optimal\n2   Subject_2    135     136      -1  FALSE       high\n3   Subject_3    147     123      24  FALSE borderline\n4   Subject_4    117     130     -13  FALSE borderline\n5   Subject_5    152     134      18  FALSE       high\n6   Subject_6    134     143      -9  FALSE       high\n7   Subject_7    114     135     -21  FALSE       high\n8   Subject_8    121     139     -18  FALSE       high\n9   Subject_9    131     120      11  FALSE    optimal\n10 Subject_10    130     124       6  FALSE borderline\n\n\n\n\n\n\nCustom function\n\n\narguments: list (2 df’s), R function (default “mean”)\nperforms the calculations of the R function in the argument (or the default “mean”) for pre, post, and diff columns of the placebo and treatment df’s\nstores these results in vectors within a new list\nassigns meaningful names that include the name of the statistic used on each of those vectors\n\n\ncompute_stats &lt;- function(df_list, stat_ = \"mean\") {\n  # retrieve function for specified statistic\n  stat_fun &lt;- get(stat_)\n  \n  # create names vector \n  stat_names &lt;- c(paste(\"pre\", stat_, sep=\"_\"),\n                  paste(\"post\", stat_, sep=\"_\"),\n                  paste(\"diff\", stat_, sep=\"_\"))\n  \n  # initialize list to be returned\n  ret_list &lt;- list(numeric(3), numeric(3))\n  \n  # assign names to the vectors in the new list from the old list\n  names(ret_list) &lt;- names(bp_list)\n  \n  # apply names to the vectors within the list\n  names(ret_list[[1]]) &lt;- stat_names\n  names(ret_list[[2]]) &lt;- stat_names\n  \n  # go through 2 data frames in the input list and store calc in new vectors\n  for (i in 1:2){\n    for (j in 2:4){\n      ret_list[[i]][j-1] &lt;- stat_fun(df_list[[i]][,j])\n    }\n  }\n  \n  return(ret_list)  \n}\n\nCall function: no statistic specified\n\ncompute_stats(bp_list)\n\n$treatment\n pre_mean post_mean diff_mean \n   131.60    125.95      5.65 \n\n$placebo\n pre_mean post_mean diff_mean \n    131.9     128.9       3.0 \n\n\nCall function: var\n\ncompute_stats(bp_list, \"var\")\n\n$treatment\n  pre_var  post_var  diff_var \n 75.72632  78.99737 117.81842 \n\n$placebo\n pre_var post_var diff_var \n149.8778 124.9889 341.3333 \n\n\nCall function: sd\n\ncompute_stats(bp_list, \"sd\")\n\n$treatment\n   pre_sd   post_sd   diff_sd \n 8.702087  8.888046 10.854419 \n\n$placebo\n  pre_sd  post_sd  diff_sd \n12.24246 11.17984 18.47521 \n\n\nCall function: min\n\ncompute_stats(bp_list, \"min\")\n\n$treatment\n pre_min post_min diff_min \n     115      114      -24 \n\n$placebo\n pre_min post_min diff_min \n     114      105      -21 \n\n\nCall function: max\n\ncompute_stats(bp_list, \"max\")\n\n$treatment\n pre_max post_max diff_max \n     151      146       21 \n\n$placebo\n pre_max post_max diff_max \n     152      143       33"
  },
  {
    "objectID": "HW3.html#task-1-control-flow-practice",
    "href": "HW3.html#task-1-control-flow-practice",
    "title": "HW3",
    "section": "",
    "text": "Create status columns in the df’s within bp_list\n\n\nbp_list$treatment$status &lt;- character(dim(bp_list$treatment)[1])\nbp_list$placebo$status &lt;- character(dim(bp_list$placebo)[1])\n\n\nFor loop to populate values of status column of treatment data frame\n\n\nFor each iteration, will store the post_bp value in val\nIf the value is not numeric or is missing, the loop will stop\nOtherwise, status value will be assigned based on the specified range\n\n\nfor (i in 1:dim(bp_list$treatment)[1]) {\n  val &lt;- bp_list$treatment[i, \"post_bp\"]\n  bp_list$treatment[[\"status\"]][i] &lt;- \n      if (is.na(val) | !is.numeric(val)) {\n        break\n      } else if (val &lt;= 120) {\n        \"optimal\"\n      } else if (val &lt;= 130) {\n        \"borderline\"\n      } else {\n        \"high\" # all val &gt; 130\n      }\n}\n\n\nFor loop to populate values of status column of placebo data frame\n\n\nFollows the same logic as step 2, just for placebo instead of treatment df\n\n\nfor (i in 1:dim(bp_list$placebo)[1]) {\n  val &lt;- bp_list$placebo[i, \"post_bp\"]\n  bp_list$placebo[[\"status\"]][i] &lt;- \n      if (is.na(val) | !is.numeric(val)) {\n        break\n      } else if (val &lt;= 120) {\n        \"optimal\"\n      } else if (val &lt;= 130) {\n        \"borderline\"\n      } else {\n        \"high\" # all val &gt; 130\n      }\n}\n\nPrinting results\n\nbp_list\n\n$treatment\n              patient pre_bp post_bp diff_bp normal     status\nSubject_1   Subject_1    120     127      -7  FALSE borderline\nSubject_2   Subject_2    151     145       6  FALSE       high\nSubject_3   Subject_3    125     135     -10  FALSE       high\nSubject_4   Subject_4    126     122       4  FALSE borderline\nSubject_5   Subject_5    115     115       0   TRUE    optimal\nSubject_6   Subject_6    132     122      10  FALSE borderline\nSubject_7   Subject_7    132     123       9  FALSE borderline\nSubject_8   Subject_8    129     126       3  FALSE borderline\nSubject_9   Subject_9    134     126       8  FALSE borderline\nSubject_10 Subject_10    139     129      10  FALSE borderline\nSubject_11 Subject_11    127     132      -5  FALSE       high\nSubject_12 Subject_12    122     146     -24  FALSE       high\nSubject_13 Subject_13    127     120       7  FALSE    optimal\nSubject_14 Subject_14    135     114      21   TRUE    optimal\nSubject_15 Subject_15    133     121      12  FALSE borderline\nSubject_16 Subject_16    128     120       8  FALSE    optimal\nSubject_17 Subject_17    147     128      19  FALSE borderline\nSubject_18 Subject_18    138     120      18  FALSE    optimal\nSubject_19 Subject_19    140     133       7  FALSE       high\nSubject_20 Subject_20    132     115      17   TRUE    optimal\n\n$placebo\n      patient pre_bp post_bp diff_bp normal     status\n1   Subject_1    138     105      33   TRUE    optimal\n2   Subject_2    135     136      -1  FALSE       high\n3   Subject_3    147     123      24  FALSE borderline\n4   Subject_4    117     130     -13  FALSE borderline\n5   Subject_5    152     134      18  FALSE       high\n6   Subject_6    134     143      -9  FALSE       high\n7   Subject_7    114     135     -21  FALSE       high\n8   Subject_8    121     139     -18  FALSE       high\n9   Subject_9    131     120      11  FALSE    optimal\n10 Subject_10    130     124       6  FALSE borderline"
  },
  {
    "objectID": "HW3.html#task-2-function-writing",
    "href": "HW3.html#task-2-function-writing",
    "title": "HW3",
    "section": "",
    "text": "Custom function\n\n\narguments: list (2 df’s), R function (default “mean”)\nperforms the calculations of the R function in the argument (or the default “mean”) for pre, post, and diff columns of the placebo and treatment df’s\nstores these results in vectors within a new list\nassigns meaningful names that include the name of the statistic used on each of those vectors\n\n\ncompute_stats &lt;- function(df_list, stat_ = \"mean\") {\n  # retrieve function for specified statistic\n  stat_fun &lt;- get(stat_)\n  \n  # create names vector \n  stat_names &lt;- c(paste(\"pre\", stat_, sep=\"_\"),\n                  paste(\"post\", stat_, sep=\"_\"),\n                  paste(\"diff\", stat_, sep=\"_\"))\n  \n  # initialize list to be returned\n  ret_list &lt;- list(numeric(3), numeric(3))\n  \n  # assign names to the vectors in the new list from the old list\n  names(ret_list) &lt;- names(bp_list)\n  \n  # apply names to the vectors within the list\n  names(ret_list[[1]]) &lt;- stat_names\n  names(ret_list[[2]]) &lt;- stat_names\n  \n  # go through 2 data frames in the input list and store calc in new vectors\n  for (i in 1:2){\n    for (j in 2:4){\n      ret_list[[i]][j-1] &lt;- stat_fun(df_list[[i]][,j])\n    }\n  }\n  \n  return(ret_list)  \n}\n\nCall function: no statistic specified\n\ncompute_stats(bp_list)\n\n$treatment\n pre_mean post_mean diff_mean \n   131.60    125.95      5.65 \n\n$placebo\n pre_mean post_mean diff_mean \n    131.9     128.9       3.0 \n\n\nCall function: var\n\ncompute_stats(bp_list, \"var\")\n\n$treatment\n  pre_var  post_var  diff_var \n 75.72632  78.99737 117.81842 \n\n$placebo\n pre_var post_var diff_var \n149.8778 124.9889 341.3333 \n\n\nCall function: sd\n\ncompute_stats(bp_list, \"sd\")\n\n$treatment\n   pre_sd   post_sd   diff_sd \n 8.702087  8.888046 10.854419 \n\n$placebo\n  pre_sd  post_sd  diff_sd \n12.24246 11.17984 18.47521 \n\n\nCall function: min\n\ncompute_stats(bp_list, \"min\")\n\n$treatment\n pre_min post_min diff_min \n     115      114      -24 \n\n$placebo\n pre_min post_min diff_min \n     114      105      -21 \n\n\nCall function: max\n\ncompute_stats(bp_list, \"max\")\n\n$treatment\n pre_max post_max diff_max \n     151      146       21 \n\n$placebo\n pre_max post_max diff_max \n     152      143       33"
  }
]